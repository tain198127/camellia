
server:
  port: 6380
spring:
  application:
    name: camellia-redis-proxy-server

camellia-redis-proxy:
  #port: 6380 #priority greater than server.port, if missing, use server.port; if setting -6379, proxy will choose a random port
  #application-name: camellia-redis-proxy-server  #priority greater than spring.application.name, if missing, use spring.application.name
  console-port: 16379 #console port, default 16379, if setting -16379, proxy will choose a random port, if setting 0, will disable console
  password: pass123   #password of proxy, priority less than custom client-auth-provider-class-name
  monitor-enable: false  #monitor enable/disable configure
  monitor-interval-seconds: 60 #monitor data refresh interval seconds
#  cluster-mode-enable: true #cluster-mode, if setting true, proxy-cluster disguised as a redis-cluster, should configure proxy.cluster.mode.nodes=xx in camellia-redis-proxy.properties
#  netty-transport-mode: epoll
  plugins: #plugin list
    - monitorPlugin
    - bigKeyPlugin
    - hotKeyPlugin
#  config: #you can get this config from ProxyDynamicConf.java, priority less than camellia-redis-proxy.properties
#    "k": v
  transpond:
    type: local #local、remote、custom
    local:
      type: simple #simple、complex
      resource: redis://@127.0.0.1:6379 #target transpond redis address
#      resource: redis-cluster://@127.0.0.1:6379,127.0.0.1:6380,127.0.0.1:6381,127.0.0.1:6382,127.0.0.1:6383,127.0.0.1:6384
#      resource: redis-sentinel://@127.0.0.1:26379/master1
#      resource: redis-sentinel-slaves://@127.0.0.1:26379/master1
#      type: complex
#      json-file: resource-table.json
#    type: remote
#    remote:
#      url: http://127.0.0.1:8080 #camellia-dashboard's address
#      check-interval-millis: 5000 # Polling period to camellia-dashboard
#      dynamic: true # indicates that multiple sets of configurations are supported, the default is true
#      header-map: # custom header map for request to camellia-dashboard (optional)
#        api-key: secretToken # header name: api-key, header value: secretToken
#    redis-conf:
#      multi-write-mode: first_resource_only #multi write mode, see MultiWriteMode.java, FIRST_RESOURCE_ONLY/ALL_RESOURCES_NO_CHECKALL_RESOURCES_CHECK_ERROR
#      close-idle-connection: true #if close upstream idle redis-connection, default true
#      check-idle-connection-threshold-seconds: 600  #upstream redis-connection idle check threshold, default 600s
#      preheat: true #preheat upstream redis-connection, default true

